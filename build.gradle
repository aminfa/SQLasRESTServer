plugins {
    id 'org.springframework.boot' version '2.2.5.RELEASE'
    id 'io.spring.dependency-management' version '1.0.9.RELEASE'
    id 'java'
    id 'eclipse'
    id "idea"
}


repositories {
    mavenLocal()
    mavenCentral()
}

sourceSets {
    main {
        java {
            srcDir 'src/main/java'
        }
        resources {
        	srcDir 'conf'
        	srcDir 'resources'
    	}
    }
	test {
	   	java {
	   		srcDir 'src/test/java'
	   	}
    }
}

//Java version
sourceCompatibility = 1.8
targetCompatibility = 1.8

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

dependencies {
    def excludeLog4j = {
        exclude module: 'log4j-to-slf4j'
        exclude module: 'log4j-api'
        exclude module: 'slf4j-log4j12'
        exclude module: 'log4j'
        exclude module: 'slf4j-log4j12'
    }
    def excludeLogback = {
        exclude module: "spring-boot-starter-logging"
        exclude module: "logback-classic"
    }

    /*
     * Set logging library:
     */
    def useLog4j = true // change to `false` to switch to logback
    def excludeLoggingLibrary
    if(useLog4j) {
        excludeLoggingLibrary = excludeLogback
        compile 'org.springframework.boot:spring-boot-starter-log4j2'
    } else {
        excludeLoggingLibrary = excludeLog4j
    }

    /*
     * Declare dependencies:
     */
	// dependencies for development time
 	compile('ai.libs:jaicore-basic:0.2.1', excludeLoggingLibrary)
 	
 	compile("mysql:mysql-connector-java:8.0.19", excludeLoggingLibrary)  
 	
 	compile("commons-codec:commons-codec:1.11", excludeLoggingLibrary) 

	compile("org.springframework.boot:spring-boot-starter-data-jpa", excludeLoggingLibrary) 

    compile("org.springframework.boot:spring-boot-starter-web", excludeLoggingLibrary) 

	compileOnly("org.projectlombok:lombok", excludeLoggingLibrary) 

	annotationProcessor("org.projectlombok:lombok", excludeLoggingLibrary)  
	
	compile("org.apache.httpcomponents:httpclient:4.5.10", excludeLoggingLibrary) 

    runtime("org.springframework.boot:spring-boot-devtools")
    
    testCompile("junit:junit")
}

bootJar {
	archiveBaseName.set 'sql-rest-server'
	archiveVersion.set '0.1.0'
}

configurations {
}

eclipse {
	project.natures "org.eclipse.buildship.core.gradleprojectnature"
}
bootRun {
    workingDir = rootDir.getAbsolutePath()
}


/*
 * Add JMH configuration for micro benchmarking:
 * More informations about: https://openjdk.java.net/projects/code-tools/jmh/
 */
sourceSets {
    jmh {
        java.srcDirs = ['src/jmh/java']
        resources.srcDirs = ['src/jmh/resources']
        compileClasspath += sourceSets.main.runtimeClasspath
    }
}
task prepareJMHOutputDir {
    doLast {
        def outDir = new File("${project.projectDir}/out")
        if (!outDir.isDirectory()) {
            if (outDir.isFile()) {
                throw new RuntimeException("Expected directory: " + outDir.absolutePath)
            }
            def created = outDir.mkdir()
            if (!created) {
                throw new RuntimeException("Coulnd't create output directory: " + outDir.absolutePath)
            }
            if (!outDir.canWrite()) {
                throw new RuntimeException("Cannot write to: " + outDir.absolutePath)
            }
        }
    }
}
def getExcludedBenchmarks() {
    return [
            'Parallel'
    ]
}
task jmh(type: JavaExec, dependsOn: [jmhClasses, prepareJMHOutputDir]) {
    main = 'org.openjdk.jmh.Main'
    classpath = sourceSets.jmh.runtimeClasspath + sourceSets.jmh.compileClasspath
    def excludedBenchmarks = getExcludedBenchmarks()
    def excludedBenchmarkStr = excludedBenchmarks.collect {".*${it}.*"}.join(",")
    def currentTimeStr = java.time.format.DateTimeFormatter.ofPattern("yyyy-MM-dd_HH-mm-ss")
            .format(java.time.LocalDateTime.now())
    args '-e', excludedBenchmarkStr, // exclude benchmarks
            '-rf', 'text', // result format
            '-rff', "out/benchmark-results-${currentTimeStr}.txt" // result file
    // ,'-bm', 'all' // benchmark mode

    jvmArgs '-ea'
}
dependencies {
    jmhImplementation('org.springframework.boot:spring-boot-starter-webflux'){
        exclude module: "spring-boot-starter-logging"
        exclude module: "logback-classic"
    }
    jmhImplementation 'org.openjdk.jmh:jmh-core:1.21'
    jmhImplementation 'org.apache.httpcomponents:httpclient:4.5.10'
    jmhAnnotationProcessor 'org.openjdk.jmh:jmh-generator-annprocess:1.21'
}
classes.finalizedBy(jmhClasses)


task jmhIterativeSelect(type: JavaExec, dependsOn: [jmhClasses, prepareJMHOutputDir]) {
    main = 'org.openjdk.jmh.Main'
    classpath = sourceSets.jmh.runtimeClasspath + sourceSets.jmh.compileClasspath
    def currentTimeStr = java.time.format.DateTimeFormatter.ofPattern("yyyy-MM-dd_HH-mm-ss")
            .format(java.time.LocalDateTime.now())
    args 'IterativeSelect',
            '-rf', 'text', // result format
            '-rff', "out/benchmark-results-${currentTimeStr}.txt" // result file

    jvmArgs '-ea'
}
task jmhBatchSelect(type: JavaExec, dependsOn: [jmhClasses, prepareJMHOutputDir]) {
    main = 'org.openjdk.jmh.Main'
    classpath = sourceSets.jmh.runtimeClasspath + sourceSets.jmh.compileClasspath
    def currentTimeStr = java.time.format.DateTimeFormatter.ofPattern("yyyy-MM-dd_HH-mm-ss")
            .format(java.time.LocalDateTime.now())
    args 'ParallelSelect',
            '-rf', 'text', // result format
            '-rff', "out/benchmark-results-${currentTimeStr}.txt" // result file

    jvmArgs '-ea'
}
task jmhOverloaded(type: JavaExec, dependsOn: [jmhClasses, prepareJMHOutputDir]) {
    main = 'org.openjdk.jmh.Main'
    classpath = sourceSets.jmh.runtimeClasspath + sourceSets.jmh.compileClasspath
    def currentTimeStr = java.time.format.DateTimeFormatter.ofPattern("yyyy-MM-dd_HH-mm-ss")
            .format(java.time.LocalDateTime.now())
    args 'Overloaded*',
            '-rf', 'text', // result format
            '-rff', "out/benchmark-results-${currentTimeStr}.txt" // result file

    jvmArgs '-ea'
}
task jmhHttpClients(type: JavaExec, dependsOn: [jmhClasses, prepareJMHOutputDir]) {
    main = 'org.openjdk.jmh.Main'
    classpath = sourceSets.jmh.runtimeClasspath + sourceSets.jmh.compileClasspath
    def currentTimeStr = java.time.format.DateTimeFormatter.ofPattern("yyyy-MM-dd_HH-mm-ss")
            .format(java.time.LocalDateTime.now())
    args 'HttpClientPerformance',
            '-rf', 'text', // result format
            '-rff', "out/benchmark-results-${currentTimeStr}.txt" // result file

    jvmArgs '-ea'
}
